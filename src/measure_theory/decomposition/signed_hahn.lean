/-
Copyright (c) 2021 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import measure_theory.vector_measure
import order.symm_diff

/-!
# Hahn decomposition

This file defines positive and negative sets with respect to a vector measure and
prove the Hahn decomposition theorem (signed version).

## Main definitions

* `vector_measure.positive` : a set `i` is positive with respect to a vector measure `v` if `v`
  restricted on `i` is non-negative, i.e. `0 ‚â§ v.restrict i`.
* `vector_measure.negative` : a set `i` is negative with respect to a vector measure `v` if `v`
  restricted on `i` is non-positive, i.e. `v.restrict i ‚â§ 0`.

## Main results

* `signed_measure.exists_disjoint_positive_negative_union_eq` : the Hahn decomposition theorem.
* `signed_measure.exists_negative_set` : A measurable set of negative measure contains at least
  one negative subset.

## Tags

positive, negative, Hahn decomposition theorem
-/

noncomputable theory
open_locale classical big_operators nnreal ennreal

section lemmas

variables {Œ± : Type*}

open_locale topological_space

open set filter

lemma exists_tendsto_Inf {S : set ‚Ñù} (hS : S.nonempty) (hS' : bdd_below S) :
  ‚àÉ (f : ‚Ñï ‚Üí ‚Ñù) (hf : ‚àÄ n, f n ‚àà S), tendsto f at_top (ùìù (Inf S)) :=
begin
  have : ‚àÄ n : ‚Ñï, ‚àÉ t ‚àà S, t < Inf S + 1 / (n + 1 : ‚Ñù),
  { exact Œª n, (real.Inf_lt _ hS hS').1 ((lt_add_iff_pos_right _).2 nat.one_div_pos_of_nat) },
  choose f hf using this,
  refine ‚ü®f, Œª n, (hf n).1, _‚ü©,
  rw tendsto_iff_dist_tendsto_zero,
  refine squeeze_zero_norm _ tendsto_one_div_add_at_top_nhds_0_nat,
  intro n,
  obtain ‚ü®hf‚ÇÅ, hf‚ÇÇ‚ü© := hf n,
  rw [real.dist_eq, real.norm_eq_abs, abs_abs,
      abs_of_nonneg (sub_nonneg.2 (real.Inf_le S hS' hf‚ÇÅ))],
  linarith,
end

lemma exists_tendsto_Sup {S : set ‚Ñù} (hS : S.nonempty) (hS' : bdd_above S) :
  ‚àÉ (f : ‚Ñï ‚Üí ‚Ñù) (hf : ‚àÄ n, f n ‚àà S), tendsto f at_top (ùìù (Sup S)) :=
begin
  have : ‚àÄ n : ‚Ñï, ‚àÉ t ‚àà S, Sup S - 1 / (n + 1 : ‚Ñù) < t,
  { intro n,
    apply (real.lt_Sup _ hS hS').1,
    rw [sub_lt, _root_.sub_self],
    exact nat.one_div_pos_of_nat },
  choose f hf using this,
  refine ‚ü®f, Œª n, (hf n).1, _‚ü©,
  rw tendsto_iff_dist_tendsto_zero,
  refine squeeze_zero_norm _ tendsto_one_div_add_at_top_nhds_0_nat,
  intro n,
  obtain ‚ü®hf‚ÇÅ, hf‚ÇÇ‚ü© := hf n,
  rw [real.dist_eq, real.norm_eq_abs, abs_abs, abs_of_nonpos],
  { linarith },
  { rw [sub_le, _root_.sub_zero],
    exact real.le_Sup S hS' hf‚ÇÅ },
end

end lemmas

variables {Œ± Œ≤ : Type*} [measurable_space Œ±]
variables {M : Type*} [add_comm_monoid M] [topological_space M] [ordered_add_comm_monoid M]

namespace measure_theory

namespace vector_measure

/-- A set `i` is positive with respect to a vector measure `v` if `v` restricted
on`i` is non-negative, i.e. `0 ‚â§ v.restrict i`. -/
def positive (v : vector_measure Œ± M) (i : set Œ±) : Prop :=
0 ‚â§ v.restrict i

lemma positive_iff {v : vector_measure Œ± M} {i : set Œ±} (hi : measurable_set i) :
  v.positive i ‚Üî ‚àÄ ‚¶Éj‚¶Ñ, measurable_set j ‚Üí j ‚äÜ i ‚Üí 0 ‚â§ v j :=
begin
  convert restrict_le_restrict_iff 0 v hi,
  rw restrict_zero, refl,
end

/-- A set `i` is negative with respect to a vector measure `v` if `v` restricted
on`i` is non-positive, i.e. `v.restrict i ‚â§ 0`. -/
def negative (v : vector_measure Œ± M) (i : set Œ±) : Prop :=
v.restrict i ‚â§ 0

lemma negative_iff {v : vector_measure Œ± M} {i : set Œ±} (hi : measurable_set i) :
  v.negative i ‚Üî ‚àÄ ‚¶Éj‚¶Ñ, measurable_set j ‚Üí j ‚äÜ i ‚Üí v j ‚â§ 0 :=
begin
  convert restrict_le_restrict_iff v 0 hi,
  rw restrict_zero, refl,
end

variables {v : signed_measure Œ±} {i j : set Œ±}

lemma empty_positive : v.positive ‚àÖ :=
begin
  intros j hj,
  rw restrict_empty,
end

lemma empty_negative : v.negative ‚àÖ :=
begin
  intros j hj,
  rw restrict_empty,
end

lemma positive_nonneg_measure (hi‚ÇÇ : v.positive i) :
  0 ‚â§ v i :=
begin
  by_cases hi‚ÇÅ : measurable_set i,
  { exact (positive_iff hi‚ÇÅ).1 hi‚ÇÇ hi‚ÇÅ set.subset.rfl },
  { rw v.not_measurable hi‚ÇÅ },
end

lemma negative_nonpos_measure (hi‚ÇÇ : v.negative i) :
  v i ‚â§ 0 :=
begin
  by_cases hi‚ÇÅ : measurable_set i,
  { exact (negative_iff hi‚ÇÅ).1 hi‚ÇÇ hi‚ÇÅ set.subset.rfl },
  { rw v.not_measurable hi‚ÇÅ }
end

lemma positive_of_not_measurable (hi : ¬¨ measurable_set i) :
  v.positive i :=
begin
  rw [positive, restrict, dif_neg hi],
  exact le_refl _,
end

lemma negative_of_not_measurable (hi : ¬¨ measurable_set i) :
  v.negative i :=
begin
  rw [negative, restrict, dif_neg hi],
  exact le_refl _,
end

/-- This lemma is similar to the forward direction of `vector_measure.positive_iff` except it
does not have a measurability condition on `j`.

This is useful when we are using the property that a set is positive. -/
lemma subset_nonneg_of_positive {i : set Œ±}
  (hi : measurable_set i) (hi‚ÇÇ : v.positive i) : ‚àÄ ‚¶Éj‚¶Ñ, j ‚äÜ i ‚Üí 0 ‚â§ v j :=
begin
  intros j hj,
  rw ‚Üê zero_apply j,
  refine subset_le_of_restrict_le_restrict 0 v hi _ hj,
  rwa restrict_zero
end

/-- This lemma is similar to the backward direction of `vector_measure.positive_iff` except it
does not require `i` to be measurable.

This is useful when we are proving a set is positive. -/
lemma positive_of_subset_nonneg {i : set Œ±}
  (h : ‚àÄ ‚¶Éj‚¶Ñ, measurable_set j ‚Üí j ‚äÜ i ‚Üí 0 ‚â§ v j) : v.positive i :=
Œª j hj, (@restrict_zero Œ± _ ‚Ñù _ _ i) ‚ñ∏ restrict_le_restrict_of_subset_le 0 v h _ hj

/-- This lemma is similar to the forward direction of `vector_measure.negative_iff` except it
does not have a measurability condition on `j`.

This is useful when we are using the property that a set is negative. -/
lemma subset_nonpos_of_negative {i : set Œ±}
  (hi : measurable_set i) (hi‚ÇÇ : v.negative i) : ‚àÄ ‚¶Éj‚¶Ñ, j ‚äÜ i ‚Üí v j ‚â§ 0 :=
begin
  intros j hj,
  rw ‚Üê zero_apply j,
  refine subset_le_of_restrict_le_restrict v 0 hi _ hj,
  rwa restrict_zero
end

/-- This lemma is similar to the backward direction of `vector_measure.negative_iff` except it
does not require `i` to be measurable.

This is useful when we are proving a set is negative. -/
lemma negative_of_subset_nonpos {i : set Œ±}
  (h : ‚àÄ ‚¶Éj‚¶Ñ, measurable_set j ‚Üí j ‚äÜ i ‚Üí v j ‚â§ 0) : v.negative i :=
Œª j hj, (@restrict_zero Œ± _ ‚Ñù _ _ i) ‚ñ∏ restrict_le_restrict_of_subset_le v 0 h _ hj

lemma measurable_of_not_positive (hi : ¬¨ v.positive i) : measurable_set i :=
not.imp_symm positive_of_not_measurable hi

lemma measurable_of_not_negative (hi : ¬¨ v.negative i) : measurable_set i :=
not.imp_symm negative_of_not_measurable hi

lemma positive_subset_positive (hi‚ÇÅ : measurable_set i) (hi‚ÇÇ : v.positive i) (hij : j ‚äÜ i) :
  v.positive j :=
positive_of_subset_nonneg (Œª k hk‚ÇÅ hk‚ÇÇ, (positive_iff hi‚ÇÅ).1 hi‚ÇÇ hk‚ÇÅ (set.subset.trans hk‚ÇÇ hij))

lemma negative_subset_negative (hi‚ÇÅ : measurable_set i) (hi‚ÇÇ : v.negative i) (hij : j ‚äÜ i) :
  v.negative j :=
negative_of_subset_nonpos (Œª k hk‚ÇÅ hk‚ÇÇ, (negative_iff hi‚ÇÅ).1 hi‚ÇÇ hk‚ÇÅ (set.subset.trans hk‚ÇÇ hij))

lemma not_positive_subset (hi : ¬¨ v.positive i) (h : i ‚äÜ j) (hj : measurable_set j) :
  ¬¨ v.positive j :=
Œª h', hi $ positive_subset_positive hj h' h

lemma not_negative_subset (hi : ¬¨ v.negative i) (h : i ‚äÜ j) (hj : measurable_set j) :
  ¬¨ v.negative j :=
Œª h', hi $ negative_subset_negative hj h' h

lemma positive_union_positive
  (hi‚ÇÅ : measurable_set i) (hi‚ÇÇ : v.positive i)
  (hj‚ÇÅ : measurable_set j) (hj‚ÇÇ : v.positive j) : v.positive (i ‚à™ j) :=
begin
  refine positive_of_subset_nonneg (Œª a ha‚ÇÅ ha‚ÇÇ, _),
  have h‚ÇÅ := ha‚ÇÅ.inter hi‚ÇÅ,
  have : a ‚à© i ‚à™ a ‚à© j \ (a ‚à© i) = a,
    { rwa [set.union_diff_self, ‚Üê set.inter_union_distrib_left, set.inter_eq_left_iff_subset] },
  rw [‚Üê this, of_union disjoint_sdiff_self_right h‚ÇÅ ((ha‚ÇÅ.inter hj‚ÇÅ).diff h‚ÇÅ)],
  refine add_nonneg ((positive_iff hi‚ÇÅ).1 hi‚ÇÇ h‚ÇÅ (a.inter_subset_right i)) _,
  exact (positive_iff hj‚ÇÅ).1 hj‚ÇÇ ((ha‚ÇÅ.inter hj‚ÇÅ).diff h‚ÇÅ)
    (set.subset.trans ((a ‚à© j).diff_subset (a ‚à© i)) (a.inter_subset_right j)),
  apply_instance
end

lemma positive_Union_positive {f : ‚Ñï ‚Üí set Œ±}
  (hf‚ÇÅ : ‚àÄ n, measurable_set (f n)) (hf‚ÇÇ : ‚àÄ n, v.positive (f n)) :
  v.positive ‚ãÉ n, f n :=
begin
  convert restrict_le_restrict_Union 0 v hf‚ÇÅ _,
  { rw restrict_zero, refl },
  { intro n,
    rw restrict_zero,
    exact hf‚ÇÇ n }
end

lemma negative_union_negative
  (hi‚ÇÅ : measurable_set i) (hi‚ÇÇ : v.negative i)
  (hj‚ÇÅ : measurable_set j) (hj‚ÇÇ : v.negative j) : v.negative (i ‚à™ j) :=
begin
  refine negative_of_subset_nonpos (Œª a ha‚ÇÅ ha‚ÇÇ, _),
  have h‚ÇÅ := ha‚ÇÅ.inter hi‚ÇÅ,
  have : a ‚à© i ‚à™ a ‚à© j \ (a ‚à© i) = a,
    { rwa [set.union_diff_self, ‚Üê set.inter_union_distrib_left, set.inter_eq_left_iff_subset] },
  rw [‚Üê this, of_union disjoint_sdiff_self_right h‚ÇÅ ((ha‚ÇÅ.inter hj‚ÇÅ).diff h‚ÇÅ)],
  refine add_nonpos ((negative_iff hi‚ÇÅ).1 hi‚ÇÇ h‚ÇÅ (a.inter_subset_right i)) _,
  exact (negative_iff hj‚ÇÅ).1 hj‚ÇÇ ((ha‚ÇÅ.inter hj‚ÇÅ).diff h‚ÇÅ)
    (set.subset.trans ((a ‚à© j).diff_subset (a ‚à© i)) (a.inter_subset_right j)),
  apply_instance
end

lemma negative_Union_negative {f : ‚Ñï ‚Üí set Œ±}
  (hf‚ÇÅ : ‚àÄ n, measurable_set (f n)) (hf‚ÇÇ : ‚àÄ n, v.negative (f n)) :
  v.negative ‚ãÉ n, f n :=
begin
  convert restrict_le_restrict_Union v 0 hf‚ÇÅ _,
  { rw restrict_zero, refl },
  { intro n,
    rw restrict_zero,
    exact hf‚ÇÇ n }
end

lemma exists_pos_measure_of_not_negative (hi : ¬¨ v.negative i) :
  ‚àÉ (j : set Œ±) (hj‚ÇÅ : measurable_set j) (hj‚ÇÇ : j ‚äÜ i) , 0 < v j :=
begin
  have hi‚ÇÅ : measurable_set i := measurable_of_not_negative hi,
  rw [negative_iff hi‚ÇÅ] at hi,
  push_neg at hi,
  obtain ‚ü®j, hj‚ÇÅ, hj‚ÇÇ, hj‚ü© := hi,
  exact ‚ü®j, hj‚ÇÅ, hj‚ÇÇ, hj‚ü©,
end

end vector_measure

namespace signed_measure

open filter vector_measure

variables {s : signed_measure Œ±} {i j : set Œ±}

section exists_negative_set

private def p (s : signed_measure Œ±) (i j : set Œ±) (n : ‚Ñï) : Prop :=
‚àÉ (k : set Œ±) (hj‚ÇÅ : k ‚äÜ i \ j) (hj‚ÇÇ : measurable_set k), (1 / (n + 1) : ‚Ñù) < s k

private lemma exists_nat_one_div_lt_measure_of_not_negative (hi : ¬¨ s.negative (i \ j)) :
  ‚àÉ (n : ‚Ñï), p s i j n :=
let ‚ü®k, hj‚ÇÅ, hj‚ÇÇ, hj‚ü© := exists_pos_measure_of_not_negative hi in
let ‚ü®n, hn‚ü© := exists_nat_one_div_lt hj in ‚ü®n, k, hj‚ÇÇ, hj‚ÇÅ, hn‚ü©

private def aux‚ÇÄ (s : signed_measure Œ±) (i j : set Œ±) : ‚Ñï :=
if hi : ¬¨ s.negative (i \ j) then nat.find (exists_nat_one_div_lt_measure_of_not_negative hi) else 0

private lemma aux‚ÇÄ_spec (hi : ¬¨ s.negative (i \ j)) : p s i j (aux‚ÇÄ s i j) :=
begin
  rw [aux‚ÇÄ, dif_pos hi],
  convert nat.find_spec _,
end

private lemma aux‚ÇÄ_min (hi : ¬¨ s.negative (i \ j)) {m : ‚Ñï} (hm : m < aux‚ÇÄ s i j) :
  ¬¨ p s i j m :=
begin
  rw [aux‚ÇÄ, dif_pos hi] at hm,
  exact nat.find_min _ hm
end

private def aux‚ÇÅ (s : signed_measure Œ±) (i j : set Œ±) : set Œ± :=
if hi : ¬¨ s.negative (i \ j) then classical.some (aux‚ÇÄ_spec hi) else ‚àÖ

private lemma aux‚ÇÅ_spec (hi : ¬¨ s.negative (i \ j)) :
  ‚àÉ (hj‚ÇÅ : (aux‚ÇÅ s i j) ‚äÜ i \ j) (hj‚ÇÇ : measurable_set (aux‚ÇÅ s i j)),
  (1 / (aux‚ÇÄ s i j + 1) : ‚Ñù) < s (aux‚ÇÅ s i j) :=
begin
  rw [aux‚ÇÅ, dif_pos hi],
  exact classical.some_spec (aux‚ÇÄ_spec hi),
end

private lemma aux‚ÇÅ_subset : aux‚ÇÅ s i j ‚äÜ i \ j :=
begin
  by_cases hi : ¬¨ s.negative (i \ j),
  { exact let ‚ü®h, _‚ü© := aux‚ÇÅ_spec hi in h },
  { rw [aux‚ÇÅ, dif_neg hi],
    exact set.empty_subset _ },
end

private lemma aux‚ÇÅ_subset' : aux‚ÇÅ s i j ‚äÜ i :=
set.subset.trans aux‚ÇÅ_subset (set.diff_subset _ _)

private lemma aux‚ÇÅ_measurable_set : measurable_set (aux‚ÇÅ s i j) :=
begin
  by_cases hi : ¬¨ s.negative (i \ j),
  { exact let ‚ü®_, h, _‚ü© := aux‚ÇÅ_spec hi in h },
  { rw [aux‚ÇÅ, dif_neg hi],
    exact measurable_set.empty }
end

private lemma aux‚ÇÅ_lt (hi : ¬¨ s.negative (i \ j)) :
  (1 / (aux‚ÇÄ s i j + 1) : ‚Ñù) < s (aux‚ÇÅ s i j) :=
let ‚ü®_, _, h‚ü© := aux‚ÇÅ_spec hi in h

private def aux (s : signed_measure Œ±) (i : set Œ±) : ‚Ñï ‚Üí set Œ±
| 0 := aux‚ÇÅ s i ‚àÖ
| (n + 1) := aux‚ÇÅ s i ‚ãÉ k ‚â§ n,
  have k < n + 1 := nat.lt_succ_iff.mpr H,
  aux k

private lemma aux_succ (n : ‚Ñï) : aux s i n.succ = aux‚ÇÅ s i ‚ãÉ k ‚â§ n, aux s i k :=
by rw aux

private lemma aux_subset (n : ‚Ñï) :
  aux s i n ‚äÜ i :=
begin
  cases n;
  { rw aux, exact aux‚ÇÅ_subset' }
end

private lemma aux_lt (n : ‚Ñï) (hn :¬¨ s.negative (i \ ‚ãÉ l ‚â§ n, aux s i l)) :
  (1 / (aux‚ÇÄ s i (‚ãÉ k ‚â§ n, aux s i k) + 1) : ‚Ñù) < s (aux s i n.succ) :=
begin
  rw aux_succ,
  apply aux‚ÇÅ_lt hn,
end

private lemma measure_of_aux (hi‚ÇÇ : ¬¨ s.negative i)
  (n : ‚Ñï) (hn : ¬¨ s.negative (i \ ‚ãÉ k < n, aux s i k)) :
  0 < s (aux s i n) :=
begin
  cases n,
  { rw aux, rw ‚Üê @set.diff_empty _ i at hi‚ÇÇ,
    rcases aux‚ÇÅ_spec hi‚ÇÇ with ‚ü®_, _, h‚ü©,
    exact (lt_trans nat.one_div_pos_of_nat h) },
  { rw aux_succ,
    have h‚ÇÅ : ¬¨ s.negative (i \ ‚ãÉ (k : ‚Ñï) (H : k ‚â§ n), aux s i k),
    { apply not_negative_subset hn,
      { apply set.diff_subset_diff_right,
        intros x,
        simp_rw [set.mem_Union],
        rintro ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü©,
        exact ‚ü®n, nat.lt_succ_iff.mpr hn‚ÇÅ, hn‚ÇÇ‚ü© },
      { convert measurable_of_not_negative hn,
        exact funext (Œª x, by rw nat.lt_succ_iff) } },
    rcases aux‚ÇÅ_spec h‚ÇÅ with ‚ü®_, _, h‚ü©,
    exact (lt_trans nat.one_div_pos_of_nat h) }
end

private lemma aux_measurable_set (n : ‚Ñï) : measurable_set (aux s i n) :=
begin
  cases n,
  { rw aux,
    exact aux‚ÇÅ_measurable_set },
  { rw aux,
    exact aux‚ÇÅ_measurable_set }
end

private lemma aux_disjoint' {n m : ‚Ñï} (h : n < m) : aux s i n ‚à© aux s i m = ‚àÖ :=
begin
  rw set.eq_empty_iff_forall_not_mem,
  rintro x ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©,
  cases m, linarith,
  { rw aux at hx‚ÇÇ,
    exact (aux‚ÇÅ_subset hx‚ÇÇ).2
      (set.mem_Union.2 ‚ü®n, set.mem_Union.2 ‚ü®nat.lt_succ_iff.mp h, hx‚ÇÅ‚ü©‚ü©) }
end

private lemma aux_disjoint : pairwise (disjoint on (aux s i)) :=
begin
  intros n m h,
  rcases lt_or_gt_of_ne h with (h | h),
  { intro x,
    rw [set.inf_eq_inter, aux_disjoint' h],
    exact id },
  { intro x,
    rw [set.inf_eq_inter, set.inter_comm, aux_disjoint' h],
    exact id }
end

private lemma exists_negative_set' (hi‚ÇÅ : measurable_set i) (hi‚ÇÇ : s i < 0)
  (hn : ¬¨ ‚àÄ n : ‚Ñï, ¬¨ s.negative (i \ ‚ãÉ l < n, aux s i l)) :
  ‚àÉ (j : set Œ±) (hj‚ÇÅ : measurable_set j) (hj‚ÇÇ : j ‚äÜ i), s.negative j ‚àß s j < 0 :=
begin
  by_cases s.negative i,
  { exact ‚ü®i, hi‚ÇÅ, set.subset.refl _, h, hi‚ÇÇ‚ü© },
  { push_neg at hn,
    set k := nat.find hn with hk‚ÇÅ,
    have hk‚ÇÇ : s.negative (i \ ‚ãÉ l < k, aux s i l) := nat.find_spec hn,
    have hmeas : measurable_set (‚ãÉ (l : ‚Ñï) (H : l < k), aux s i l) :=
      (measurable_set.Union $ Œª _, measurable_set.Union_Prop (Œª _, aux_measurable_set _)),
    refine ‚ü®i \ ‚ãÉ l < k, aux s i l, hi‚ÇÅ.diff hmeas, set.diff_subset _ _, hk‚ÇÇ, _‚ü©,
    rw [of_diff hmeas hi‚ÇÅ, s.of_disjoint_Union_nat],
    { have h‚ÇÅ : ‚àÄ l < k, 0 ‚â§ s (aux s i l),
      { intros l hl,
        refine le_of_lt (measure_of_aux h _ _),
        refine (not_negative_subset (nat.find_min hn hl) (set.subset.refl _)) (hi‚ÇÅ.diff _),
        exact (measurable_set.Union $ Œª _, measurable_set.Union_Prop (Œª _, aux_measurable_set _)) },
      suffices : 0 ‚â§ ‚àë' (l : ‚Ñï), s (‚ãÉ (H : l < k), aux s i l),
        linarith,
      refine tsum_nonneg _,
      intro l, by_cases l < k,
      { convert h‚ÇÅ _ h,
        ext x,
        rw [set.mem_Union, exists_prop, and_iff_right_iff_imp],
        exact Œª _, h },
      { convert le_of_eq s.empty.symm,
        ext, simp only [exists_prop, set.mem_empty_eq, set.mem_Union, not_and, iff_false],
        exact Œª h', false.elim (h h') } },
    { intro, exact measurable_set.Union_Prop (Œª _, aux_measurable_set _) },
    { intros a b hab x hx,
      simp only [exists_prop, set.mem_Union, set.mem_inter_eq, set.inf_eq_inter] at hx,
      exact let ‚ü®‚ü®_, hx‚ÇÅ‚ü©, _, hx‚ÇÇ‚ü© := hx in aux_disjoint a b hab ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü© },
    { apply set.Union_subset,
      intros a x,
      simp only [and_imp, exists_prop, set.mem_Union],
      intros _ hx,
      exact aux_subset _ hx },
    { apply_instance } }
end .

/-- A measurable set of negative measure has a negative subset of negative measure. -/
theorem exists_negative_set (hi‚ÇÅ : measurable_set i) (hi‚ÇÇ : s i < 0) :
  ‚àÉ (j : set Œ±) (hj‚ÇÅ : measurable_set j) (hj‚ÇÇ : j ‚äÜ i), s.negative j ‚àß s j < 0 :=
begin
  by_cases s.negative i,
  { exact ‚ü®i, hi‚ÇÅ, set.subset.refl _, h, hi‚ÇÇ‚ü© },
  { by_cases hn : ‚àÄ n : ‚Ñï, ¬¨ s.negative (i \ ‚ãÉ l < n, aux s i l),
    { set A := i \ ‚ãÉ l, aux s i l with hA,
      set bdd : ‚Ñï ‚Üí ‚Ñï := Œª n, aux‚ÇÄ s i (‚ãÉ k ‚â§ n, aux s i k) with hbdd,

      have hn' : ‚àÄ n : ‚Ñï, ¬¨ s.negative (i \ ‚ãÉ l ‚â§ n, aux s i l),
      { intro n,
        convert hn (n + 1), ext l,
        simp only [exists_prop, set.mem_Union, and.congr_left_iff],
        exact Œª _, nat.lt_succ_iff.symm },
      have h‚ÇÅ : s i = s A + ‚àë' l, s (aux s i l),
      { rw [hA, ‚Üê s.of_disjoint_Union_nat, add_comm, of_add_of_diff],
        exact measurable_set.Union (Œª _, aux_measurable_set _),
        exacts [hi‚ÇÅ, set.Union_subset (Œª _, aux_subset _), Œª _,
                aux_measurable_set _, aux_disjoint] },
      have h‚ÇÇ : s A ‚â§ s i,
      { rw h‚ÇÅ,
        apply le_add_of_nonneg_right,
        exact tsum_nonneg (Œª n, le_of_lt (measure_of_aux h _ (hn n))) },
      have h‚ÇÉ' : summable (Œª n, (1 / (bdd n + 1) : ‚Ñù)),
      { have : summable (Œª l, s (aux s i l)),
        { exact has_sum.summable (s.m_Union (Œª _, aux_measurable_set _) aux_disjoint) },
        refine summable_of_nonneg_of_le _ _ (summable.comp_injective this nat.succ_injective),
        { intro _, exact le_of_lt nat.one_div_pos_of_nat },
        { intro n, exact le_of_lt (aux_lt n (hn' n)) } },
      have h‚ÇÉ : tendsto (Œª n, (bdd n : ‚Ñù) + 1) at_top at_top,
      { simp only [one_div] at h‚ÇÉ',
        exact summable.tendsto_top_of_pos h‚ÇÉ' (Œª n, nat.cast_add_one_pos (bdd n)) },
      have h‚ÇÑ : tendsto (Œª n, (bdd n : ‚Ñù)) at_top at_top,
      { convert at_top.tendsto_at_top_add_const_right (-1) h‚ÇÉ, simp },

      refine ‚ü®A, _, set.diff_subset _ _, _, _‚ü©,
      { exact hi‚ÇÅ.diff (measurable_set.Union (Œª _, aux_measurable_set _)) },
      { by_contra hnn,
        have hA‚ÇÅ : measurable_set A := measurable_of_not_negative hnn,
        rw negative_iff hA‚ÇÅ at hnn, push_neg at hnn,
        obtain ‚ü®E, hE‚ÇÅ, hE‚ÇÇ, hE‚ÇÉ‚ü© := hnn,
        have : ‚àÉ k, 1 ‚â§ bdd k ‚àß 1 / (bdd k : ‚Ñù) < s E,
        { rw tendsto_at_top_at_top at h‚ÇÑ,
          obtain ‚ü®k, hk‚ü© := h‚ÇÑ (max (1 / s E + 1) 1),
          refine ‚ü®k, _, _‚ü©,
          { have hle := le_of_max_le_right (hk k le_rfl),
            norm_cast at hle,
            exact hle },
          { have : 1 / s E < bdd k, linarith [le_of_max_le_left (hk k le_rfl)],
            rw one_div at this ‚ä¢,
            rwa inv_lt (lt_trans (inv_pos.2 hE‚ÇÉ) this) hE‚ÇÉ } },
        obtain ‚ü®k, hk‚ÇÅ, hk‚ÇÇ‚ü© := this,
        have hA' : A ‚äÜ i \ ‚ãÉ l ‚â§ k, aux s i l,
        { rw hA,
          apply set.diff_subset_diff_right,
          intro x, simp only [set.mem_Union],
          rintro ‚ü®n, _, hn‚ÇÇ‚ü©,
          exact ‚ü®n, hn‚ÇÇ‚ü© },
        refine aux‚ÇÄ_min (hn' k) (buffer.lt_aux_2 hk‚ÇÅ) ‚ü®E, set.subset.trans hE‚ÇÇ hA', hE‚ÇÅ, _‚ü©,
        convert hk‚ÇÇ, norm_cast,
        exact nat.sub_add_cancel hk‚ÇÅ },
      { exact lt_of_le_of_lt h‚ÇÇ hi‚ÇÇ } },
    { exact exists_negative_set' hi‚ÇÅ hi‚ÇÇ hn } }
end .

end exists_negative_set

/-- The set of measures of the set of measurable negative sets. -/
def measure_of_negatives (s : signed_measure Œ±) : set ‚Ñù :=
  s '' { B | ‚àÉ (hB‚ÇÅ : measurable_set B), s.negative B }

lemma zero_mem_measure_of_negatives : (0 : ‚Ñù) ‚àà s.measure_of_negatives :=
‚ü®‚àÖ, ‚ü®measurable_set.empty, empty_negative‚ü©, s.empty‚ü©

lemma measure_of_negatives_bdd_below :
  ‚àÉ x, ‚àÄ y ‚àà s.measure_of_negatives, x ‚â§ y :=
begin
  by_contra, push_neg at h,
  have h' : ‚àÄ n : ‚Ñï, ‚àÉ y : ‚Ñù, y ‚àà s.measure_of_negatives ‚àß y < -n := Œª n, h (-n),
  choose f hf using h',
  have hf' : ‚àÄ n : ‚Ñï, ‚àÉ B ‚àà { B | ‚àÉ (hB‚ÇÅ : measurable_set B), s.negative B }, s B < -n,
  { intro n,
    rcases hf n with ‚ü®‚ü®B, hB‚ÇÅ, hB‚ÇÇ‚ü©, hlt‚ü©,
    exact ‚ü®B, hB‚ÇÅ, hB‚ÇÇ.symm ‚ñ∏ hlt‚ü© },
  choose B hB using hf',
  have hmeas : ‚àÄ n, measurable_set (B n) := Œª n, let ‚ü®h, _‚ü© := (hB n).1 in h,
  set A := ‚ãÉ n, B n with hA,
  have hfalse : ‚àÄ n : ‚Ñï, s A ‚â§ -n,
  { intro n,
    refine le_trans _ (le_of_lt (hB n).2),
    rw [hA, ‚Üê set.diff_union_of_subset (set.subset_Union _ n),
        of_union (disjoint.comm.1 set.disjoint_diff) _ (hmeas n)],
    { refine add_le_of_nonpos_left _,
      have : s.negative A := negative_Union_negative hmeas (Œª m, let ‚ü®_, h‚ü© := (hB m).1 in h),
      refine negative_nonpos_measure (negative_subset_negative _ this (set.diff_subset _ _)),
      exact measurable_set.Union hmeas },
    { apply_instance },
    { exact (measurable_set.Union hmeas).diff (hmeas n) } },
  suffices : ¬¨ ‚àÄ n : ‚Ñï, s A ‚â§ -n,
  { exact this hfalse },
  push_neg,
  rcases exists_nat_gt (-(s A)) with ‚ü®n, hn‚ü©,
  exact ‚ü®n, neg_lt.1 hn‚ü©,
end

/-- **The Hahn decomposition thoerem**: Given a signed measure `s`, there exist
disjoint measurable sets `i`, `j` such that `i` is positive, `j` is negative
and `i ‚à™ j = set.univ`.  -/
theorem exists_disjoint_positive_negative_union_eq (s : signed_measure Œ±) :
  ‚àÉ (i j : set Œ±) (hi‚ÇÅ : measurable_set i) (hi‚ÇÇ : s.positive i)
                  (hj‚ÇÅ : measurable_set j) (hj‚ÇÇ : s.negative j),
  disjoint i j ‚àß i ‚à™ j = set.univ :=
begin
  obtain ‚ü®f, hf‚ÇÅ, hf‚ÇÇ‚ü© := exists_tendsto_Inf
    ‚ü®0, @zero_mem_measure_of_negatives _ _ s‚ü© measure_of_negatives_bdd_below,

  choose B hB using hf‚ÇÅ,
  have hB‚ÇÅ : ‚àÄ n, measurable_set (B n) := Œª n, let ‚ü®h, _‚ü© := (hB n).1 in h,
  have hB‚ÇÇ : ‚àÄ n, s.negative (B n) := Œª n, let ‚ü®_, h‚ü© := (hB n).1 in h,

  set A := ‚ãÉ n, B n with hA,
  have hA‚ÇÅ : measurable_set A := measurable_set.Union hB‚ÇÅ,
  have hA‚ÇÇ : s.negative A := negative_Union_negative hB‚ÇÅ hB‚ÇÇ,
  have hA‚ÇÉ : s A = Inf s.measure_of_negatives,
  { apply has_le.le.antisymm,
    { refine le_of_tendsto_of_tendsto tendsto_const_nhds hf‚ÇÇ (eventually_of_forall _),
      intro n,
      rw [‚Üê (hB n).2, hA, ‚Üê set.diff_union_of_subset (set.subset_Union _ n),
      of_union (disjoint.comm.1 set.disjoint_diff) _ (hB‚ÇÅ n)],
      { refine add_le_of_nonpos_left _,
        have : s.negative A := negative_Union_negative hB‚ÇÅ (Œª m, let ‚ü®_, h‚ü© := (hB m).1 in h),
        refine negative_nonpos_measure (negative_subset_negative _ this (set.diff_subset _ _)),
        exact measurable_set.Union hB‚ÇÅ },
      { apply_instance },
      { exact (measurable_set.Union hB‚ÇÅ).diff (hB‚ÇÅ n) } },
    { exact real.Inf_le _ measure_of_negatives_bdd_below ‚ü®A, ‚ü®hA‚ÇÅ, hA‚ÇÇ‚ü©, rfl‚ü© } },

  refine ‚ü®A·∂ú, A, hA‚ÇÅ.compl, _, hA‚ÇÅ, hA‚ÇÇ,
          disjoint_compl_left, (set.union_comm A A·∂ú) ‚ñ∏ set.union_compl_self A‚ü©,
  rw positive_iff hA‚ÇÅ.compl,
  intros C hC hC‚ÇÅ,
  by_contra hC‚ÇÇ, push_neg at hC‚ÇÇ,
  rcases exists_negative_set hC hC‚ÇÇ with ‚ü®D, hD‚ÇÅ, hD, hD‚ÇÇ, hD‚ÇÉ‚ü©,

  have : s (A ‚à™ D) < Inf s.measure_of_negatives,
  { rw [‚Üê hA‚ÇÉ, of_union (set.disjoint_of_subset_right (set.subset.trans hD hC‚ÇÅ)
        disjoint_compl_right) hA‚ÇÅ hD‚ÇÅ],
    linarith, apply_instance },
  refine not_le.2 this _,
  refine real.Inf_le _ measure_of_negatives_bdd_below ‚ü®A ‚à™ D, ‚ü®_, _‚ü©, rfl‚ü©,
  { exact hA‚ÇÅ.union hD‚ÇÅ },
  { exact negative_union_negative hA‚ÇÅ hA‚ÇÇ hD‚ÇÅ hD‚ÇÇ }
end

/-- Alternative formulation of `exists_disjoint_positive_negative_union_eq` using complements. -/
lemma exists_compl_positive_negative (s : signed_measure Œ±) :
  ‚àÉ (i : set Œ±) (hi‚ÇÅ : measurable_set i), s.positive i ‚àß s.negative i·∂ú :=
begin
  obtain ‚ü®i, j, hi‚ÇÅ, hi‚ÇÇ, _, hj‚ÇÇ, hdisj, huniv‚ü© :=
    s.exists_disjoint_positive_negative_union_eq,
  refine ‚ü®i, hi‚ÇÅ, hi‚ÇÇ, _‚ü©,
  rw [set.compl_eq_univ_diff, ‚Üê huniv,
      set.union_diff_cancel_left (set.disjoint_iff.mp hdisj)],
  exact hj‚ÇÇ,
end

/-- The symmetric difference of two Hahn decompositions have measure zero. -/
lemma of_symm_diff_compl_positive_negative {s : signed_measure Œ±}
  {i j : set Œ±} (hi : measurable_set i) (hj : measurable_set j)
  (hi' : s.positive i ‚àß s.negative i·∂ú) (hj' : s.positive j ‚àß s.negative j·∂ú) :
  s (i Œî j) = 0 ‚àß s (i·∂ú Œî j·∂ú) = 0 :=
begin
  rw [positive_iff, negative_iff] at hi' hj',
  split,
  { rw [symm_diff_def, set.diff_eq_compl_inter, set.diff_eq_compl_inter,
        set.sup_eq_union, of_union,
        le_antisymm (hi'.2 (hi.compl.inter hj) (set.inter_subset_left _ _))
          (hj'.1 (hi.compl.inter hj) (set.inter_subset_right _ _)),
        le_antisymm (hj'.2 (hj.compl.inter hi) (set.inter_subset_left _ _))
          (hi'.1 (hj.compl.inter hi) (set.inter_subset_right _ _)), add_zero],
    { exact set.disjoint_of_subset_left (set.inter_subset_left _ _)
        (set.disjoint_of_subset_right (set.inter_subset_right _ _)
        (disjoint.comm.1 (is_compl.disjoint is_compl_compl))) },
    { exact hj.compl.inter hi },
    { exact hi.compl.inter hj } },
  { rw [symm_diff_def, set.diff_eq_compl_inter, set.diff_eq_compl_inter,
        compl_compl, compl_compl, set.sup_eq_union, of_union,
        le_antisymm (hi'.2 (hj.inter hi.compl) (set.inter_subset_right _ _))
          (hj'.1 (hj.inter hi.compl) (set.inter_subset_left _ _)),
        le_antisymm (hj'.2 (hi.inter hj.compl) (set.inter_subset_right _ _))
          (hi'.1 (hi.inter hj.compl) (set.inter_subset_left _ _)), add_zero],
    { exact set.disjoint_of_subset_left (set.inter_subset_left _ _)
        (set.disjoint_of_subset_right (set.inter_subset_right _ _)
        (is_compl.disjoint is_compl_compl)) },
    { exact hj.inter hi.compl },
    { exact hi.inter hj.compl } },
  all_goals { measurability },
end

end signed_measure

end measure_theory
